#!/usr/bin/env python3
"""
Simple rendering script that creates placeholder images for testing
"""

import json
import sys
from pathlib import Path
from PIL import Image, ImageDraw, ImageFont
import click

def create_placeholder_image(prompt, width=1024, height=1024, bundle_id="unknown"):
    """Create a placeholder image with the prompt text."""
    
    # Create a white background
    img = Image.new('RGB', (width, height), color='white')
    draw = ImageDraw.Draw(img)
    
    # Try to use a default font, fallback to basic if not available
    try:
        font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 24)
    except:
        try:
            font = ImageFont.truetype("arial.ttf", 24)
        except:
            font = ImageFont.load_default()
    
    # Add title
    title = f"Anamalia Render: {bundle_id}"
    draw.text((50, 50), title, fill='black', font=font)
    
    # Add prompt (truncated if too long)
    prompt_lines = []
    words = prompt.split()
    current_line = ""
    
    for word in words:
        test_line = current_line + " " + word if current_line else word
        bbox = draw.textbbox((0, 0), test_line, font=font)
        text_width = bbox[2] - bbox[0]
        
        if text_width > width - 100:
            if current_line:
                prompt_lines.append(current_line)
                current_line = word
            else:
                prompt_lines.append(word)
        else:
            current_line = test_line
    
    if current_line:
        prompt_lines.append(current_line)
    
    # Limit to reasonable number of lines
    prompt_lines = prompt_lines[:15]
    
    # Draw prompt lines
    y_offset = 100
    for line in prompt_lines:
        draw.text((50, y_offset), line, fill='black', font=font)
        y_offset += 30
    
    # Add footer
    footer = "Generated by Anamalia Prompt Assembler"
    draw.text((50, height - 50), footer, fill='gray', font=font)
    
    return img

def render_bundle(bundle_path, output_dir, width=1024, height=1024):
    """Render a single bundle to a placeholder image."""
    
    # Load bundle
    with open(bundle_path, 'r') as f:
        bundle = json.load(f)
    
    bundle_id = bundle.get('id', 'unknown')
    prompt = bundle.get('assembled_prompt_text', '')
    
    # Create placeholder image
    img = create_placeholder_image(prompt, width, height, bundle_id)
    
    # Save image
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True)
    
    render_filename = f"{bundle_id}_render_placeholder.png"
    render_path = output_path / render_filename
    img.save(render_path)
    
    # Create metadata
    metadata = {
        "bundle_id": bundle_id,
        "render_id": f"{bundle_id}_render_placeholder",
        "created_at": "2025-10-23T19:47:12.331963",
        "prompt": prompt,
        "model": "placeholder",
        "parameters": {
            "width": width,
            "height": height,
            "steps": 1,
            "guidance_scale": 1.0,
            "seed": None
        },
        "bundle_metadata": bundle.get('metadata', {}),
        "file_path": str(render_path)
    }
    
    # Save metadata
    metadata_filename = f"{bundle_id}_render_placeholder_metadata.json"
    metadata_path = output_path / metadata_filename
    with open(metadata_path, 'w') as f:
        json.dump(metadata, f, indent=2)
    
    return render_path

@click.command()
@click.option('--bundle-file', help='Path to bundle JSON file')
@click.option('--bundles-dir', default='bundles', help='Directory containing bundles')
@click.option('--output-dir', default='renders', help='Output directory')
@click.option('--width', default=1024, help='Image width')
@click.option('--height', default=1024, help='Image height')
@click.option('--verbose', '-v', is_flag=True, help='Verbose output')
def main(bundle_file, bundles_dir, output_dir, width, height, verbose):
    """Create placeholder images from bundles."""
    
    if bundle_file:
        # Single bundle
        bundle_path = Path(bundle_file)
        if not bundle_path.exists():
            click.echo(f"❌ Bundle file not found: {bundle_path}")
            return
        
        click.echo(f"🎨 Rendering single bundle: {bundle_path}")
        render_path = render_bundle(bundle_path, output_dir, width, height)
        click.echo(f"✅ Created: {render_path}")
    
    else:
        # All bundles in directory
        bundles_path = Path(bundles_dir)
        bundle_files = list(bundles_path.glob("*.json"))
        
        if not bundle_files:
            click.echo(f"❌ No bundles found in {bundles_path}")
            return
        
        click.echo(f"🎨 Rendering {len(bundle_files)} bundles...")
        
        for bundle_path in bundle_files:
            if verbose:
                click.echo(f"📦 Processing: {bundle_path.name}")
            
            try:
                render_path = render_bundle(bundle_path, output_dir, width, height)
                if verbose:
                    click.echo(f"✅ Created: {render_path.name}")
            except Exception as e:
                click.echo(f"❌ Error rendering {bundle_path.name}: {e}")
        
        click.echo(f"🎉 Rendering complete! Check {output_dir}/")

if __name__ == '__main__':
    main()
